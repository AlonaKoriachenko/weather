{"ast":null,"code":"var _jsxFileName = \"/Users/matt/GitHub/weather/src/WeatherForecast.js\";\nimport React, { useState } from \"react\";\nimport WeatherForecastPreview from \"./WeatherForecastPreview\";\nimport axios from \"axios\";\nimport \"./WeatherForecast.css\";\nexport default function WeatherForecast(props) {\n  const [loaded, setLoaded] = useState(false);\n  const [forecast, setForecast] = useState(null);\n\n  function handleForecastResponse(response) {\n    setForecast(response.data);\n    setLoaded(true);\n  }\n\n  if (loaded && props.city === forecast.city.name) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"WeatherForecast row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(WeatherForecastPreview, {\n      data: forecast.list[0],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(WeatherForecastPreview, {\n      data: forecast.list[1],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(WeatherForecastPreview, {\n      data: forecast.list[2],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(WeatherForecastPreview, {\n      data: forecast.list[3],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(WeatherForecastPreview, {\n      data: forecast.list[4],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(WeatherForecastPreview, {\n      data: forecast.list[5],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }));\n  } else {\n    let apiKey = \"5f472b7acba333cd8a035ea85a0d4d4c\";\n    let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\n    axios.get(url).then(handleForecastResponse);\n    return null;\n  }\n}","map":{"version":3,"sources":["/Users/matt/GitHub/weather/src/WeatherForecast.js"],"names":["React","useState","WeatherForecastPreview","axios","WeatherForecast","props","loaded","setLoaded","forecast","setForecast","handleForecastResponse","response","data","city","name","list","apiKey","url","get","then"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,sBAAP,MAAmC,0BAAnC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAO,uBAAP;AAEA,eAAe,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC7C,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBN,QAAQ,CAAC,KAAD,CAApC;AACA,QAAM,CAACO,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,IAAD,CAAxC;;AAEA,WAASS,sBAAT,CAAgCC,QAAhC,EAA0C;AACxCF,IAAAA,WAAW,CAACE,QAAQ,CAACC,IAAV,CAAX;AACAL,IAAAA,SAAS,CAAC,IAAD,CAAT;AACD;;AAED,MAAID,MAAM,IAAID,KAAK,CAACQ,IAAN,KAAeL,QAAQ,CAACK,IAAT,CAAcC,IAA3C,EAAiD;AAC/C,wBACE;AAAK,MAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,sBAAD;AAAwB,MAAA,IAAI,EAAEN,QAAQ,CAACO,IAAT,CAAc,CAAd,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE,oBAAC,sBAAD;AAAwB,MAAA,IAAI,EAAEP,QAAQ,CAACO,IAAT,CAAc,CAAd,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,eAGE,oBAAC,sBAAD;AAAwB,MAAA,IAAI,EAAEP,QAAQ,CAACO,IAAT,CAAc,CAAd,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHF,eAIE,oBAAC,sBAAD;AAAwB,MAAA,IAAI,EAAEP,QAAQ,CAACO,IAAT,CAAc,CAAd,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,eAKE,oBAAC,sBAAD;AAAwB,MAAA,IAAI,EAAEP,QAAQ,CAACO,IAAT,CAAc,CAAd,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,eAME,oBAAC,sBAAD;AAAwB,MAAA,IAAI,EAAEP,QAAQ,CAACO,IAAT,CAAc,CAAd,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANF,CADF;AAUD,GAXD,MAWO;AACL,QAAIC,MAAM,GAAG,kCAAb;AACA,QAAIC,GAAG,GAAI,sDAAqDZ,KAAK,CAACQ,IAAK,UAASG,MAAO,eAA3F;AAEAb,IAAAA,KAAK,CAACe,GAAN,CAAUD,GAAV,EAAeE,IAAf,CAAoBT,sBAApB;AAEA,WAAO,IAAP;AACD;AACF","sourcesContent":["import React, { useState } from \"react\";\nimport WeatherForecastPreview from \"./WeatherForecastPreview\";\nimport axios from \"axios\";\nimport \"./WeatherForecast.css\";\n\nexport default function WeatherForecast(props) {\n  const [loaded, setLoaded] = useState(false);\n  const [forecast, setForecast] = useState(null);\n\n  function handleForecastResponse(response) {\n    setForecast(response.data);\n    setLoaded(true);\n  }\n\n  if (loaded && props.city === forecast.city.name) {\n    return (\n      <div className=\"WeatherForecast row\">\n        <WeatherForecastPreview data={forecast.list[0]} />\n        <WeatherForecastPreview data={forecast.list[1]} />\n        <WeatherForecastPreview data={forecast.list[2]} />\n        <WeatherForecastPreview data={forecast.list[3]} />\n        <WeatherForecastPreview data={forecast.list[4]} />\n        <WeatherForecastPreview data={forecast.list[5]} />\n      </div>\n    );\n  } else {\n    let apiKey = \"5f472b7acba333cd8a035ea85a0d4d4c\";\n    let url = `https://api.openweathermap.org/data/2.5/forecast?q=${props.city}&appid=${apiKey}&units=metric`;\n    \n    axios.get(url).then(handleForecastResponse);\n\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}